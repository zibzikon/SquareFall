//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Kernel.Components.PreparingToPlayDuration preparingToPlayDuration { get { return (Kernel.Components.PreparingToPlayDuration)GetComponent(GameComponentsLookup.PreparingToPlayDuration); } }
    public bool hasPreparingToPlayDuration { get { return HasComponent(GameComponentsLookup.PreparingToPlayDuration); } }

    public void AddPreparingToPlayDuration(float newValue) {
        var index = GameComponentsLookup.PreparingToPlayDuration;
        var component = (Kernel.Components.PreparingToPlayDuration)CreateComponent(index, typeof(Kernel.Components.PreparingToPlayDuration));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePreparingToPlayDuration(float newValue) {
        var index = GameComponentsLookup.PreparingToPlayDuration;
        var component = (Kernel.Components.PreparingToPlayDuration)CreateComponent(index, typeof(Kernel.Components.PreparingToPlayDuration));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePreparingToPlayDuration() {
        RemoveComponent(GameComponentsLookup.PreparingToPlayDuration);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPreparingToPlayDuration;

    public static Entitas.IMatcher<GameEntity> PreparingToPlayDuration {
        get {
            if (_matcherPreparingToPlayDuration == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PreparingToPlayDuration);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPreparingToPlayDuration = matcher;
            }

            return _matcherPreparingToPlayDuration;
        }
    }
}
