//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity currentColorSchemeEntity { get { return GetGroup(GameMatcher.CurrentColorScheme).GetSingleEntity(); } }
    public Kernel.Components.CurrentColorScheme currentColorScheme { get { return currentColorSchemeEntity.currentColorScheme; } }
    public bool hasCurrentColorScheme { get { return currentColorSchemeEntity != null; } }

    public GameEntity SetCurrentColorScheme(Kernel.Gameplay.Color.ColorSchemeConfiguration newValue) {
        if (hasCurrentColorScheme) {
            throw new Entitas.EntitasException("Could not set CurrentColorScheme!\n" + this + " already has an entity with Kernel.Components.CurrentColorScheme!",
                "You should check if the context already has a currentColorSchemeEntity before setting it or use context.ReplaceCurrentColorScheme().");
        }
        var entity = CreateEntity();
        entity.AddCurrentColorScheme(newValue);
        return entity;
    }

    public void ReplaceCurrentColorScheme(Kernel.Gameplay.Color.ColorSchemeConfiguration newValue) {
        var entity = currentColorSchemeEntity;
        if (entity == null) {
            entity = SetCurrentColorScheme(newValue);
        } else {
            entity.ReplaceCurrentColorScheme(newValue);
        }
    }

    public void RemoveCurrentColorScheme() {
        currentColorSchemeEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Kernel.Components.CurrentColorScheme currentColorScheme { get { return (Kernel.Components.CurrentColorScheme)GetComponent(GameComponentsLookup.CurrentColorScheme); } }
    public bool hasCurrentColorScheme { get { return HasComponent(GameComponentsLookup.CurrentColorScheme); } }

    public void AddCurrentColorScheme(Kernel.Gameplay.Color.ColorSchemeConfiguration newValue) {
        var index = GameComponentsLookup.CurrentColorScheme;
        var component = (Kernel.Components.CurrentColorScheme)CreateComponent(index, typeof(Kernel.Components.CurrentColorScheme));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceCurrentColorScheme(Kernel.Gameplay.Color.ColorSchemeConfiguration newValue) {
        var index = GameComponentsLookup.CurrentColorScheme;
        var component = (Kernel.Components.CurrentColorScheme)CreateComponent(index, typeof(Kernel.Components.CurrentColorScheme));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveCurrentColorScheme() {
        RemoveComponent(GameComponentsLookup.CurrentColorScheme);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCurrentColorScheme;

    public static Entitas.IMatcher<GameEntity> CurrentColorScheme {
        get {
            if (_matcherCurrentColorScheme == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CurrentColorScheme);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCurrentColorScheme = matcher;
            }

            return _matcherCurrentColorScheme;
        }
    }
}
